#include<bits/stdc++.h>
using namespace std;


 // } Driver Code Ends

 
 int dp[1021][1021];
   
// Returns the maximum value that  
// can be put in a knapsack of capacity W 
int KS(int wt[],int profit[],int W,int n)
{
    if(W==0||n==0)
    return 0;
    if(dp[n][W]!=-1)
    return dp[n][W];
    if(wt[n-1]>W)
    return dp[n][W]=KS(wt,profit,W,n-1);
    return dp[n][W]=max(KS(wt,profit,W,n-1),profit[n-1]+KS(wt,profit,W-wt[n-1],n-1));
}
int knapSack(int W, int wt[], int val[], int n) 
{ 
    int i,j;
   // Your code here 
  for(i=0;i<=n;i++)
  {
  for(j=0;j<=W;j++)
  {
   dp[i][j]=-1;   
  }    
  }
  return KS(wt,val,W,n);
}



// { Driver Code Starts.

int main()
 {
    //taking total testcases
    int t;
    cin>>t;
    while(t--)
    {
        //reading number of elements and weight
        int n, w;
        cin>>n>>w;
        
        int val[n];
        int wt[n];
        
        //inserting the values
        for(int i=0;i<n;i++)
            cin>>val[i];
        
        //inserting the weights
        for(int i=0;i<n;i++)
            cin>>wt[i];
        
        //calling method knapSack()
        cout<<knapSack(w, wt, val, n)<<endl;
        
    }
	return 0;
}  // } Driver Code Ends