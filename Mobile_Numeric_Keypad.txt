public:
	int dp[4][3];
	long long getCount(int N)
	{
		// Your code goes here
		int i,j;
		if(N==1)
		return 10;
		for(i=0;i<4;i++)
		{
		  for(j=0;j<3;j++)
		{
		    dp[i][j]=1;
		}    
		}
		dp[3][0]=-1;
		dp[3][2]=-1;
		int p,q;
		for(i=2;i<=N;i++)
		{
		 for(p=0;p<4;p++)
		{
		  for(q=0;q<3;q++)
		{
		    
		    // corner elements
		    if(p==0&&q==0)
		    {
		        dp[p][q] += dp[p+1][q]+dp[p][q+1] ;
		    }
		    if(p==2&&q==0)
		    {
		       dp[p][q] += dp[p-1][q]+dp[p][q+1] ;   
		    }
		    if(p==0&&q==2)
		    {
		         dp[p][q] += dp[p+1][q]+dp[p][q-1] ;
		    }
		    if(p==2&&q==2)
		    {
		         dp[p][q] += dp[p-1][q]+dp[p][q-1] ;
		    }
		    
		    // rest 3
		    
		    if(p==1&&q==0)
		    {
		        dp[p][q] += dp[p-1][q]+dp[p][q+1]+dp[p+1][q] ; 
		    }
		    
		    if(p==0&&q==1)
		    {
		         dp[p][q] += dp[p][q-1]+dp[p][q+1]+dp[p+1][q] ; 
		    }
		    if(p==1&&q==1)
		    {
		         dp[p][q] += dp[p-1][q]+dp[p][q-1]+dp[p+1][q] ; 
		    }
		    
		    // abs middle 
		     if(p==1&&q==1)
		    {
		       dp[p][q] += dp[p-1][q]+dp[p][q+1]+dp[p+1][q]+dp[p][q-1] ;    
		    }
		    
		     if(p==2&&q==1)
		    {
		         dp[p][q] += dp[p-1][q]+dp[p][q+1]+dp[p+1][q]+dp[p][q-1] ;    
		    
		    }
		    // edge case 0
		     if(p==3&&q==1)
		    {
		        dp[p][q]  += dp[p-1][q];    
		    

		    }
		    
		}    
		}   
		}
		int sum =0;
			 for(p=0;p<4;p++)
		{
		  for(q=0;q<3;q++)
		{
		    sum += dp[p][q];
		}
		}
		return sum+2;
	}
